<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="UpdateXlf" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <UsingTask AssemblyFile="$(BuildBinDir)\Microsoft.Build.LocalizationTasks.dll" TaskName="SaveXlfToResx"/>
  <UsingTask AssemblyFile="$(BuildBinDir)\Microsoft.Build.LocalizationTasks.dll" TaskName="UpdateXlfFromResx"/>
  <UsingTask AssemblyFile="$(BuildBinDir)\Microsoft.Build.LocalizationTasks.dll" TaskName="EmitLocalizedResources"/>
  <UsingTask AssemblyFile="$(BuildBinDir)\Microsoft.Build.LocalizationTasks.dll" TaskName="ConvertToNeutralXlf"/>

 <Target Name="CreateNeutralXlf"
         AfterTargets="SyncXlf"
         Condition="$(SyncXlf) == 'true' and $(IsTestProject) != 'true'">
    
    <ConvertToNeutralXlf NeutralResources="@(NeutralResources)"/>
 </Target>

  <Target Name="AddLocalizedResxFilesToEmbeddedResource"
          BeforeTargets="$(PrepareResourcesDependsOn);PrepareResources"
          DependsOnTargets="SyncXlf;GenerateLocalizedResxResourcesFromXlf;AddEnglishResxFilesToEmbeddedResource"
          Condition="'$(LocalizedBuild)' == 'true'">

    <ItemGroup>
      <!-- The depending targets generate and materialize localized resx files in @(LocalizedResxResources) -->
      <EmbeddedResource Include="@(LocalizedResxResources)"/>
    </ItemGroup>
  </Target>

  <!-- Materialize the contents of the localized resx files from their corresponding xlf files -->
  <Target Name="GenerateLocalizedResxResourcesFromXlf"
          DependsOnTargets="EmitLocalizedResources" >

    <SaveXlfToResx
      Condition="%(Identity) != ''"
      ResxPath="%(ChildResx)"
      XlfPath="@(XlfFiles)"
      ReplaceWithTestString="$(LocalizedTestBuild)"
      TestString="$(LocalizedTestString)"
    />

  </Target>

  <!-- The default english resources do not have corresponding xlf files. Simply copy them and add en in the name 
       Can't have english xlf (for uniformity) because the xlf sync code only updates the <source> tags, not the <target> targ.
       That would cause the english xlf files to become out of date

       This target needs to run after EmitLocalizedResource, otherwise the copied intermediary files would leak into NeutralResource
  -->
  <Target Name="AddEnglishResxFilesToEmbeddedResource"
          DependsOnTargets="EmitLocalizedResources">

      <ItemGroup>
        <EnglishResources Include="@(NeutralResources -> '$(IntermediateOutputPath)%(Filename).en%(Extension)')"/>
      </ItemGroup>

      <Copy
        SourceFiles="@(NeutralResources)"
        DestinationFiles="@(EnglishResources)"
      />

      <ItemGroup>
        <LocalizedResxResources Include="@(EnglishResources)">
          <LogicalName>$(AssemblyName).%(FileName).resources</LogicalName>
        </LocalizedResxResources>
      </ItemGroup>      

  </Target>

  <!-- 
    [IN]
    @(EmbeddedResource)

    [OUT]
    @(NeutralResources) - base resources that contain the English strings
    @(XlfFiles) - Location of xlf files relative to their companion neutral resource
    @(LocalizedResxResources) - Location of generated resx files. Each xlf file will generate one or more localized resx file
  -->
  <Target Name="EmitLocalizedResources"
          BeforeTargets="$(PrepareResourcesDependsOn);PrepareResources">

    <ItemGroup>
      <NeutralResources Include="@(EmbeddedResource)" Condition="'%(Extension)' == '.resx'"/> 
    </ItemGroup>

    <EmitLocalizedResources 
      NeutralResources="@(NeutralResources)"
      AssemblyName="$(AssemblyName)"
      LocalizedResxRoot="$(IntermediateOutputPath)">

      <Output TaskParameter="ResolvedXlfResources" ItemName="XlfFiles" />
      <Output TaskParameter="ResolvedLocalizedResxResources" ItemName="LocalizedResxResources" />

    </EmitLocalizedResources>
  </Target>

  <Target Name="SyncXlf"
          BeforeTargets="Build"
          DependsOnTargets="EmitLocalizedResources" 
          Condition="$(SyncXlf) == 'true' and $(IsTestProject) != 'true'">
    
    <UpdateXlfFromResx
      Condition="%(Identity) != ''"
      ResxPath="%(NeutralResx)"
      XlfPath="@(XlfFiles)"
    />

  </Target>

  <!-- Copy paste and modify OpenSourceSign from sign.targets because it only signs the main assembly 
  and provides no extension mechanism to add more assemblies to it
  
  If satellite assemblies do not get their delay sign bit switched off, the main assemblies won't load them
  -->
  <Target Name="OpenSourceSignSatelliteAssemblies"
          Condition="'$(DelaySign)' == 'true' and '@(IntermediateSatelliteAssembliesWithTargetPath)' != '' and '$(SkipSigning)' != 'true' and '$(SignType)' == 'oss'"
          DependsOnTargets="ComputeIntermediateSatelliteAssemblies"
          BeforeTargets="CopyFilesToOutputDirectory"
          Inputs="@(IntermediateSatelliteAssembliesWithTargetPath)"
          Outputs="%(IntermediateSatelliteAssembliesWithTargetPath.Identity).oss_signed"
          >
    <OpenSourceSign AssemblyPath="%(IntermediateSatelliteAssembliesWithTargetPath.Identity)" />
    <Touch Files="%(IntermediateSatelliteAssembliesWithTargetPath.Identity).oss_signed" AlwaysCreate="true" />
    <ItemGroup>
       <FileWrites Include="%(IntermediateSatelliteAssembliesWithTargetPath.Identity).oss_signed" />
    </ItemGroup>
  </Target>

  <!-- Target SignFiles from MicroBuild.Plugins.Signing.targets signs @(FilesToSign) -->
  <Target Name="AddSatelliteAssembliesToFilesToSignItem"
          Condition="('$(SignType)' == 'real' OR '$(SignType)' == 'test')"
          DependsOnTargets="ComputeIntermediateSatelliteAssemblies"
          BeforeTargets="SignFiles"
          >

    <ItemGroup>
      <FilesToSign Include="@(IntermediateSatelliteAssembliesWithTargetPath -> '$(OutputPath)%(Culture)\%(FileName)%(Extension)')">
        <Authenticode>Microsoft</Authenticode>
        <StrongName>StrongName</StrongName>
      </FilesToSign>
    </ItemGroup>

  </Target>

</Project>
