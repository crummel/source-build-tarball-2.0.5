<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Include the output assembly in the <FilesToSign /> item group if project being built is not a test project.
  -->
  <ItemGroup Condition="'$(IsTestProject)' != 'true'">
    <FilesToSign Include="$(OutDir)\$(AssemblyName)$(TargetExt)">
      <Authenticode>Microsoft</Authenticode>
      <StrongName>StrongName</StrongName>
    </FilesToSign>
  </ItemGroup>
  <Import Project="..\dir.targets" />

  <PropertyGroup>
    <!-- Don't copy NuGet implementations directly, since that would require setting a runtime and targeting a specific architecture.
         Instead, it they will be deployed by DeployDependencies.proj. -->
    <CopyNuGetImplementations>false</CopyNuGetImplementations>

    <DocumentationFile Condition="'$(EnableDocumentationFile)' == 'true'">$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <Import Project="$(CSharpTargets)"
          Condition="('$(NetCoreBuild)' != 'true')
                      and Exists('$(CSharpTargets)')"/>

  <Import Project="$(CSharpPortableTargets)"
          Condition="'$(NetCoreBuild)' == 'true'
                      and Exists('$(CSharpPortableTargets)')"/>

  <!-- Fallback: If we're building Debug-NetCore with a mono host, MSBuildExtensionsPath32 resolves to a system wide Mono specific directory that does not have the portable targets. Fallback to using the BuildTools one -->
  <Import Project="$(CSharpPortableTargetsFallback)"
          Condition="'$(NetCoreBuild)' == 'true'
                      and Exists('$(CSharpPortableTargetsFallback)')
                      and !Exists('$(CSharpPortableTargets)')"/>

  <Import Project="$(RepoRoot)\targets\OverrideGetReferenceAssemblyPaths.targets"
          Condition="'$(NetCoreBuild)' == 'true'"/>

  <PropertyGroup Condition="'$(IsTestProject)' != 'true'">
    <!-- When we build internally we need to use DelaySign, otherwise use PublicSign -->
    <PublicSign Condition="'$(UseOpenSourceSign)' != 'false'">true</PublicSign>
    <DelaySign Condition="'$(UseOpenSourceSign)' == 'false'">true</DelaySign>
    <KeyOriginatorFile>$(SourceDir)MSFT.snk</KeyOriginatorFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <SignAssembly>true</SignAssembly>
    <PublicSign>true</PublicSign>
    <AssemblyOriginatorKeyFile>$(SourceDir)Test.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <Target Name="FakeDelaySignForAL" BeforeTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <_OriginalDelaySign>$(DelaySign)</_OriginalDelaySign>
      <DelaySign>true</DelaySign>
    </PropertyGroup>
  </Target>

  <Target Name="RestoreDelaySignAfterAL" AfterTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <DelaySign>$(_OriginalDelaySign)</DelaySign>
    </PropertyGroup>
  </Target>

  <Import Project="$(MicroBuildDir)\MicroBuild.Core.targets" Condition="Exists('$(MicroBuildDir)\MicroBuild.Core.targets')" />

  <!-- Targets from buildtools that restore packages before building. -->
  <!-- TODO: ideally replaced by a standard "dotnet restore" over the solution. -->
  <Import Condition="Exists('$(ToolsDir)\packageresolve.targets')" Project="$(ToolsDir)\packageresolve.targets" />

  <ItemGroup Condition="'$(NetCoreBuild)' == 'true' and '$(UpdateNuGetPackageDependencies)' == 'true'">
    <NuSpecFile Include="$(ProjectDir)build\NuGetPackages\$(MSBuildProjectName).nuspec" Condition="Exists('$(ProjectDir)build\NuGetPackages\$(MSBuildProjectName).nuspec')">
      <Visible>false</Visible>
    </NuSpecFile>
    <NuSpecFile Include="$(ProjectDir)build\NuGetPackages\$(MSBuildProjectName).Core.nuspec" Condition="Exists('$(ProjectDir)build\NuGetPackages\$(MSBuildProjectName).Core.nuspec')">
      <Visible>false</Visible>
    </NuSpecFile>
    <NuSpecProjectFile Include="$(MSBuildProjectFullPath)">
      <Visible>false</Visible>
    </NuSpecProjectFile>
  </ItemGroup>

  <!-- Use NuSpec.ReferenceGenerator to create / update the .NET Core dependencies of the packages -->
  <Import Condition="'$(NetCoreBuild)'=='true'  and '$(UpdateNuGetPackageDependencies)' == 'true' and Exists('$(NuSpecReferenceGeneratorDir)\NuSpec.ReferenceGenerator.targets')"  Project="$(NuSpecReferenceGeneratorDir)\NuSpec.ReferenceGenerator.targets"/>

  <!-- Debugging support -->
  <PropertyGroup Condition="'$(NetCoreBuild)' == 'true'">
    <StartAction>Program</StartAction>
    <DebugEngines>{2E36F1D4-B23C-435D-AB41-18E608940038}</DebugEngines>
    <TestHost Condition="'$(OsEnvironment)' == 'Windows_NT'">dotnet.exe</TestHost>
    <TestHost Condition="'$(OsEnvironment)' != 'Windows_NT'">dotnet</TestHost>
    <StartProgram Condition="'$(StartProgram)'==''">$(DeploymentDir)\$(TestHost)</StartProgram>
    <StartArguments>$(TargetPath)</StartArguments>
  </PropertyGroup>


  <PropertyGroup Condition="'$(NetCoreBuild)' == 'true' And '$(IsTestProject)'=='true'">
    <StartArguments>xunit.console.netcore.exe $(TargetFileName) $(XunitOptions)</StartArguments>
    <StartAction>Program</StartAction>
  </PropertyGroup>

  <!-- TODO: enable for all runtime hosts https://github.com/Microsoft/msbuild/issues/694 -->
  <Import Project="$(GitVersioningDir)Nerdbank.GitVersioning.targets"
          Condition="'$(MSBuildRuntimeType)' == 'Full' And '$(IsTestProject)' != 'true' " />
  <PropertyGroup Condition="'$(MSBuildRuntimeType)' != 'Full'">
    <DefineConstants>$(DefineConstants);STATIC_VERSION_NUMBER</DefineConstants>
  </PropertyGroup>

  <!-- Update localized resources from the default English ones-->
  <!-- Do not attempt to localize src/dirs.proj since it does not represent a C# project-->
  <Import Project="UpdateLocalizedResources.targets" Condition="'$(LocalizationBuildAssetsRequired)' == 'true' and '$(IsTestProject)' != 'true' and '$(DoNotLocalizeProject)' != 'true' and '$(AssemblyName)' != 'dirs'" />

  <Import Project="CopySatellitesIntoNetcore.targets" Condition="'$(NetCoreBuild)' == 'true' and '$(LocalizedBuild)' == 'true'  and '$(IsTestProject)' != 'true' and '$(DoNotLocalizeProject)' != 'true' and '$(AssemblyName)' != 'dirs'" />

  <!-- Restore packages -->
  <PropertyGroup>
    <PackagesConfig Condition="Exists('$(MSBuildProjectDirectory)\packages.config')">$(MSBuildProjectDirectory)\packages.config</PackagesConfig>
    <RestorePackages Condition="'$(RestorePackages)' == '' and Exists('$(PackagesConfig)')">true</RestorePackages>
    <RestorePackagesSemaphore>$(PackagesDir)$(MSBuildProjectFile).package.restored</RestorePackagesSemaphore>
  </PropertyGroup>

  <PropertyGroup Condition="'$(NetCoreBuild)' == 'true'">
    <NuGetTargetMoniker>$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion)</NuGetTargetMoniker>
  </PropertyGroup>

  <Import Project="$(RepoRoot)\targets\GenApi.targets" Condition="'$(OS)' == 'Windows_NT'" />

  <!-- https://github.com/AArnott/PdbGit - stamps the .pdbs with URLs to sources on GitHub
       so that the debugger can download the exact matching source files during debugging -->
  <Import Project="$(PackagesDir)\pdbgit\3.0.41\build\PdbGit.targets" Condition="'$(DebugType)' == 'full' And '$(IsTestProject)' != 'true' And Exists('$(PackagesDir)\pdbgit\3.0.41\build\PdbGit.targets')" />

  <!-- https://github.com/ctaggart/SourceLink - stamps portable or embedded .pdbs with URLs to sources on GitHub
       so that debugger can download the exact matching source files during debugging -->
  <Import Project="$(PackagesDir)\sourcelink.create.commandline\2.1.2\build\SourceLink.Create.CommandLine.targets" Condition="'$(SourceLinkCreate)' == 'true' And '$(DebugType)' != 'full' And '$(IsTestProject)' != 'true' And Exists('$(PackagesDir)\sourcelink.create.commandline\2.1.2\build\SourceLink.Create.CommandLine.targets')" />


  <!-- Taken from Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package which tries to fix this issue
       (but doesn't include this assembly in their list).  -->
  <Target Name="LinkVSEmbeddableAssemblies" DependsOnTargets="ResolveReferences" AfterTargets="ResolveReferences">
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'Microsoft.VisualStudio.Setup.Configuration.Interop'">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <!-- copied from Microsoft.Common.CurrentVersion.targets and modified to force anycpu -->
  <!-- remove when https://github.com/Microsoft/msbuild/issues/1588 is done-->
  <Target Name="GenerateSatelliteAssemblies"
          Inputs="$(MSBuildAllProjects);@(_SatelliteAssemblyResourceInputs);$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
          Outputs="$(IntermediateOutputPath)%(Culture)\$(TargetName).resources.dll"
          Condition="'@(_SatelliteAssemblyResourceInputs)' != '' and '$(MSBuildRuntimeType)' != 'Core'">

    <MakeDir
        Directories="@(EmbeddedResource->'$(IntermediateOutputPath)%(Culture)')" />

    <AL AlgorithmId="$(Satellite_AlgorithmId)"
        BaseAddress="$(Satellite_BaseAddress)"
        CompanyName="$(Satellite_CompanyName)"
        Configuration="$(Satellite_Configuration)"
        Copyright="$(Satellite_Copyright)"
        Culture="%(Culture)"
        DelaySign="$(DelaySign)"
        Description="$(Satellite_Description)"
        EmbedResources="@(_SatelliteAssemblyResourceInputs)"
        EnvironmentVariables="$(AlEnvironment)"
        EvidenceFile="$(Satellite_EvidenceFile)"
        FileVersion="$(Satellite_FileVersion)"
        Flags="$(Satellite_Flags)"
        GenerateFullPaths="$(Satellite_GenerateFullPaths)"
        KeyContainer="$(KeyContainerName)"
        KeyFile="$(KeyOriginatorFile)"
        LinkResources="@(Satellite_LinkResource)"
        MainEntryPoint="$(Satellite_MainEntryPoint)"
        OutputAssembly="$(IntermediateOutputPath)%(Culture)\$(TargetName).resources.dll"
        Platform="anycpu"
        ProductName="$(Satellite_ProductName)"
        ProductVersion="$(Satellite_ProductVersion)"
        ResponseFiles="@(AlResponseFile)"
        SourceModules="@(Satellite_SourceModule)"
        TargetType="$(Satellite_TargetType)"
        TemplateFile="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
        Title="$(Satellite_Title)"
        ToolPath="$(AlToolPath)"
        ToolExe ="$(AlToolExe)"
        SdkToolsPath="$(TargetFrameworkSDKToolsDirectory)"
        Trademark="$(Satellite_Trademark)"
        Version="$(Satellite_Version)"
        Win32Icon="$(Satellite_Win32Icon)"
        Win32Resource="$(Satellite_Win32Resource)">

      <Output TaskParameter="OutputAssembly" ItemName="FileWrites"/>

    </AL>

  </Target>

</Project>
