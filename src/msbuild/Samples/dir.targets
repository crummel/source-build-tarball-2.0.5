<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\dir.targets" />

  <PropertyGroup>
    <!-- Explicitly set the OutDir as it is used by the packaging targets -->
    <OutDir Condition="'$(UseProductOutputPath)' != 'true'">$(BaseOutputPath)Samples\$(Configuration)\$(MSBuildProjectName)</OutDir>
  </PropertyGroup>
  
  <Import Project="$(CSharpTargets)" 
          Condition="('$(NetCoreBuild)' != 'true') 
                      and Exists('$(CSharpTargets)')"/>

  <Import Project="$(CSharpPortableTargets)" 
          Condition="'$(NetCoreBuild)' == 'true' 
                      and Exists('$(CSharpPortableTargets)')"/>
  
  <!-- Fallback: If we're building Debug-NetCore with a mono host, MSBuildExtensionsPath32 resolves to a system wide Mono specific directory that does not have the portable targets. Fallback to using the BuildTools one -->
  <Import Project="$(CSharpPortableTargetsFallback)"
          Condition="'$(NetCoreBuild)' == 'true' 
                      and Exists('$(CSharpPortableTargetsFallback)')
                      and !Exists('$(CSharpPortableTargets)')"/>

 
  <Import Project="$(RepoRoot)\targets\OverrideGetReferenceAssemblyPaths.targets"
          Condition="'$(NetCoreBuild)' == 'true'" />     
  
  <!-- nuget targets -->
  <Import Condition="Exists('$(ToolsDir)\packageresolve.targets')" Project="$(ToolsDir)\packageresolve.targets" />

  <PropertyGroup Condition="'$(NetCoreBuild)' == 'true'">
    <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
  </PropertyGroup>
</Project>
