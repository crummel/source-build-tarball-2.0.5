<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory)..\.., dir.props))\dir.props" />

  <Import Project="$(SourceDir)BuildValues.props" />

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">x86</Platform>
    <TargetPlatformIdentifier Condition="'$(TargetPlatformIdentifier)' == ''">Windows_NT</TargetPlatformIdentifier>
    <OutputPath Condition="'$(OutputPath)' == ''">$(Configuration)\$(Platform)\$(TargetPlatformIdentifier)\Output\</OutputPath>
    <OutputPathNetCore Condition="'$(OutputPathNetCore)' == ''">$(Configuration)-NetCore\AnyCPU\$(TargetPlatformIdentifier)\Output\</OutputPathNetCore>
    
    <NuGetPackageLicenseUrl>http://go.microsoft.com/fwlink/?LinkId=329770</NuGetPackageLicenseUrl>
    <NuGetPackageIconUrl>https://go.microsoft.com/fwlink/?linkid=825694</NuGetPackageIconUrl>
    <NuGetPackageProjectUrl>http://go.microsoft.com/fwlink/?LinkId=624683</NuGetPackageProjectUrl>
    <PackagesBasePath>$([System.IO.Path]::GetFullPath('$(BaseOutputPath)'))</PackagesBasePath>
    <PackagesOutDir>$([System.IO.Path]::Combine($(PackagesBasePath), 'Packages'))</PackagesOutDir>

    <SkipVersionGeneration>true</SkipVersionGeneration>

    <!-- Turn off the automated package generation in packages.targets:AddNuGetPackageVersionMetadataToNuspecs and use the above PackageVersion-->
    <DoNotGeneratePackageVersion>true</DoNotGeneratePackageVersion>
  </PropertyGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.traversal.targets))\dir.traversal.targets" />

  <Import Project="$(ToolsDir)packages.targets" Condition="Exists('$(ToolsDir)packages.targets') and '$(ImportGetNuGetPackageVersions)' != 'false'" />
  <Import Project="$(GitVersioningDir)Nerdbank.GitVersioning.targets" />

  <ItemGroup>
    <NuSpecs Include="*.nuspec" />
  </ItemGroup>

  <PropertyGroup Condition="Exists('$(ToolsDir)packages.targets') and '$(ImportGetNuGetPackageVersions)' != 'false'">
    <TraversalBuildDependsOn>
      $(TraversalBuildDependsOn);
      BuildPackagesEx;
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <Target Name="BuildPackagesEx" DependsOnTargets="GetNuGetPackageVersionEx" Inputs="%(NuSpecs.Identity);$(MSBuildThisFileFullPath)" Outputs="$(PackagesOutDir)\%(NuSpecs.Filename).$(NuGetPackageVersion).nupkg">

    <ItemGroup>
      <NuspecProperties Include="version=$(NuGetPackageVersion)"/>
      <NuspecProperties Include="@(NuSpecs->'id=%(Filename)')"/>
      <NuspecProperties Include="configuration=$(Configuration)"/>
      <NuspecProperties Include="platform=$(Platform)"/>
      <NuspecProperties Include="targetPlatformIdentifier=$(TargetPlatformIdentifier)"/>
      <NuspecProperties Include="outputPath=$(OutputPath)"/>
      <NuspecProperties Include="outputPathNetCore=$(OutputPathNetCore)"/>
      <NuspecProperties Include="licenseUrl=$(NuGetPackageLicenseUrl)"/>
      <NuspecProperties Include="projectUrl=$(NuGetPackageProjectUrl)"/>
      <NuspecProperties Include="iconUrl=$(NuGetPackageIconUrl)"/>
      <NuspecProperties Include="targetMSBuildToolsVersion=$(TargetMSBuildToolsVersion)"/>
      <NuspecProperties Include="thirdPartyNotice=$(ThirdPartyNotice)"/>
    </ItemGroup>

    <MakeDir Directories="$(PackagesOutDir)" />

    <NugetPack
      Nuspecs="@(NuSpecs->'%(FullPath)')"
      OutputDirectory="$(PackagesOutDir)"
      BaseDirectory="$(PackagesBasePath)"
      PackageVersion="$(NuGetPackageVersion)"
      ExcludeEmptyDirectories="true"
      NuspecProperties="@(NuspecProperties)"/>

    <Message Importance="High" Text="@(NuSpecs->'%(Filename)') NuGet Package -> $(PackagesOutDir)\@(NuSpecs->'%(Filename)').$(NuGetPackageVersion).nupkg" />
  </Target>

  <Target Name="GetNuGetPackageVersionEx" DependsOnTargets="GetNuGetPackageVersion">

    <!--
    This target is used to customize the versions generated by NerdBank.GitVersioning.  The $(PrereleaseVersion) is read from version.json and
    then the git commit height and build revision is appended.
    -->
    <PropertyGroup Condition=" '$(PrereleaseVersion)' != '' ">
      <BuildNumber>0</BuildNumber>
      <!-- Local builds always have a revision of -private -->
      <BuildRevision Condition="'$(BUILD_BUILDID)' == ''">private</BuildRevision>

      <!-- Official builds have an ID that is guaranteed to be unique. DevDiv builds are currently in the high 6 digits. -->
      <BuildRevision Condition="'$(BUILD_BUILDID)' != ''">$([System.Int32]::Parse($(BUILD_BUILDID)).ToString('D7'))</BuildRevision>

      <PrereleaseVersion Condition="'$(PrereleaseVersion)' != '' And '$(BuildVersionNumberComponent)' != ''">$(PrereleaseVersion)-$([System.Int32]::Parse($(BuildVersionNumberComponent)).ToString('D6'))-$(BuildRevision)</PrereleaseVersion>

      <!-- Override the NuGet package version provided by Nerdbank.GitVersioning -->
      <NuGetPackageVersion>$(MajorMinorVersion).$(BuildNumber)$(PrereleaseVersion)</NuGetPackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(PrereleaseVersion)' == '' ">
      <NuGetPackageVersion>$(MajorMinorVersion).$(BuildNumber)</NuGetPackageVersion>
    </PropertyGroup>
  </Target>
</Project>
