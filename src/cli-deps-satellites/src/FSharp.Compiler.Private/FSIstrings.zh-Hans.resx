<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fsiUnexpectedThreadAbortException" xml:space="preserve">
    <value>- 在事件处理过程中出现意外 ThreadAbortException (Ctrl-C): 正在尝试重新启动...</value>
  </data>
  <data name="fsiProductNameCommunity" xml:space="preserve">
    <value>适用于 F# {0} 的 F# 交互窗口</value>
  </data>
  <data name="fsiDidAHashrWithLockWarning" xml:space="preserve">
    <value>--&gt; 已引用“{0}”(文件可能由 F# 交互进程锁定)</value>
  </data>
  <data name="fsiTimeInfoMainString" xml:space="preserve">
    <value>Real: {0}，CPU: {1}，GC {2}</value>
  </data>
  <data name="fsiReadline" xml:space="preserve">
    <value>支持控制台中的 Tab 完成操作(默认情况下启用)</value>
  </data>
  <data name="fsiIntroTextHashloadInfo" xml:space="preserve">
    <value>像已编译和被引用的文件一样加载给定的文件</value>
  </data>
  <data name="fsiFailedToResolveAssembly" xml:space="preserve">
    <value>未能解析程序集“{0}”</value>
  </data>
  <data name="fsiIntroTextHeader2commandLine" xml:space="preserve">
    <value>  F# 交互命令行选项: </value>
  </data>
  <data name="fsiIntroTextHashquitInfo" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="fsiRemaining" xml:space="preserve">
    <value>将剩余参数视为可使用 fsi.CommandLineArgs 访问的命令行参数</value>
  </data>
  <data name="fsiEmitDebugInfoInQuotations" xml:space="preserve">
    <value>发出用引号引起来的调试信息</value>
  </data>
  <data name="fsiAbortingMainThread" xml:space="preserve">
    <value>- 正在中止主线程...</value>
  </data>
  <data name="fsiAdvanced" xml:space="preserve">
    <value>- 高级 -</value>
  </data>
  <data name="fsiIntroTextHashrInfo" xml:space="preserve">
    <value>引用(动态加载)给定的 DLL</value>
  </data>
  <data name="fsiDidAHashI" xml:space="preserve">
    <value>--&gt; 已将“{0}”添加到库包含路径</value>
  </data>
  <data name="fsiDidAHashr" xml:space="preserve">
    <value>--&gt; 已引用“{0}”</value>
  </data>
  <data name="fsiIntroTextHashtimeInfo" xml:space="preserve">
    <value>启用/停止计时</value>
  </data>
  <data name="fsiIntroTextHashIInfo" xml:space="preserve">
    <value>为被引用的 DLL 添加给定搜索路径</value>
  </data>
  <data name="fsiIntroTextHeader1directives" xml:space="preserve">
    <value>  F# 交互指令: </value>
  </data>
  <data name="fsiLoadingFilesPrefixText" xml:space="preserve">
    <value>正在加载</value>
  </data>
  <data name="stoppedDueToError" xml:space="preserve">
    <value>已因出错而停止\n</value>
  </data>
  <data name="fsiInterrupt" xml:space="preserve">
    <value>\n- 中断\n</value>
  </data>
  <data name="fsiInvalidAssembly" xml:space="preserve">
    <value>“{0}”不是有效的程序集名称</value>
  </data>
  <data name="fsiExceptionDuringPrettyPrinting" xml:space="preserve">
    <value>\n\n在整齐打印期间发生异常。\n请报告此异常，以便能够将其修复。\n跟踪: {0}\n</value>
  </data>
  <data name="fsiTurnedTimingOff" xml:space="preserve">
    <value>--&gt; 现在已关闭计时</value>
  </data>
  <data name="fsiDidAHashrWithStaleWarning" xml:space="preserve">
    <value>-&gt;引用“{0}”(具有不同时间戳的程序集已经从该位置引用并重置 fsi 以加载更新的程序集)</value>
  </data>
  <data name="fsiLanguage" xml:space="preserve">
    <value>- 语言 -</value>
  </data>
  <data name="fsiMiscellaneous" xml:space="preserve">
    <value>- 杂项 -</value>
  </data>
  <data name="fsiConsoleProblem" xml:space="preserve">
    <value>启动 F# 交互进程时发生问题。此情况可能是由一个已知问题导致的，即某些 Windows 系统上的后台进程控制台不支持启用了 Unicode 的应用程序。请尝试选择“工具”-&gt;“选项”-&gt;“F# 交互 for Visual Studio”，然后输入“--fsi-server-no-unicode”。</value>
  </data>
  <data name="fsiIntroTextHashhelpInfo" xml:space="preserve">
    <value>显示帮助</value>
  </data>
  <data name="fsiTurnedTimingOn" xml:space="preserve">
    <value>--&gt; 现在已启用计时</value>
  </data>
  <data name="fsiIntroTextHeader3" xml:space="preserve">
    <value>      请参阅“{0}”以了解各个选项</value>
  </data>
  <data name="fsiExceptionRaisedStartingServer" xml:space="preserve">
    <value>启动远程处理服务器时发生异常。\n{0}</value>
  </data>
  <data name="fsiInvalidDirective" xml:space="preserve">
    <value>无效的指令“#{0} {1}”</value>
  </data>
  <data name="fsiProductName" xml:space="preserve">
    <value>Microsoft(R) F# 交互版本 {0}</value>
  </data>
  <data name="fsiBindingSessionTo" xml:space="preserve">
    <value>正在将会话绑定到“{0}”...</value>
  </data>
  <data name="fsiCodeGeneration" xml:space="preserve">
    <value>- 代码生成 -</value>
  </data>
  <data name="fsiTimeInfoGCGenerationLabelSomeShorthandForTheWordGeneration" xml:space="preserve">
    <value>gen</value>
  </data>
  <data name="fsiDirectoryDoesNotExist" xml:space="preserve">
    <value>目录“{0}”不存在</value>
  </data>
  <data name="fsiCouldNotInstallCtrlCHandler" xml:space="preserve">
    <value>未能安装 ctrl-c 处理程序，Ctrl-C 处理将不可用。错误为:\n\t{0}</value>
  </data>
  <data name="fsiLineTooLong" xml:space="preserve">
    <value>警告: 由于行太长，将忽略某些字符\n</value>
  </data>
  <data name="fsiUse" xml:space="preserve">
    <value>在启动时使用给定文件作为初始输入</value>
  </data>
  <data name="fsiGui" xml:space="preserve">
    <value>在 Windows 窗体事件循环中执行交互(默认情况下启用)</value>
  </data>
  <data name="shadowCopyReferences" xml:space="preserve">
    <value>防止引用被 F# 交互式进程锁定</value>
  </data>
  <data name="fsiBanner3" xml:space="preserve">
    <value>若要获得帮助，请键入 #help;;</value>
  </data>
  <data name="fsiInputFiles" xml:space="preserve">
    <value>- 输入文件 -</value>
  </data>
  <data name="fsiHelp" xml:space="preserve">
    <value>显示此用法消息(缩写为: -?)</value>
  </data>
  <data name="fsiLoad" xml:space="preserve">
    <value>#load 在启动时给定的文件</value>
  </data>
  <data name="fsiExec" xml:space="preserve">
    <value>在加载文件或在命令行上运行给定的 .fsx 脚本之后退出 fsi</value>
  </data>
  <data name="fsiExit" xml:space="preserve">
    <value>\n- 退出...\n</value>
  </data>
  <data name="fsiErrorsAndWarnings" xml:space="preserve">
    <value>- 错误和警告 -</value>
  </data>
  <data name="fsiQuiet" xml:space="preserve">
    <value>禁止 fsi 写入到 stdout</value>
  </data>
  <data name="fsiUsage" xml:space="preserve">
    <value>用法: {0} &lt;选项&gt; [script.fsx [&lt;参数&gt;]]</value>
  </data>
</root>