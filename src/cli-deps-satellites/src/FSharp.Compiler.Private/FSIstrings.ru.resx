<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fsiUnexpectedThreadAbortException" xml:space="preserve">
    <value>- Непредвиденное ThreadAbortException (Ctrl-C) в ходе обработки события: Попытка перезапуска...</value>
  </data>
  <data name="fsiProductNameCommunity" xml:space="preserve">
    <value>F# Interactive для F# {0}</value>
  </data>
  <data name="fsiDidAHashrWithLockWarning" xml:space="preserve">
    <value>--&gt; Задана ссылка на "{0}" (возможно, файл заблокирован процессом F# Interactive)</value>
  </data>
  <data name="fsiTimeInfoMainString" xml:space="preserve">
    <value>Real: {0}, ЦП: {1}, GC {2}</value>
  </data>
  <data name="fsiReadline" xml:space="preserve">
    <value>Поддержка заполнения нажатием клавиши TAB в консоли (включено по умолчанию)</value>
  </data>
  <data name="fsiIntroTextHashloadInfo" xml:space="preserve">
    <value>Загрузка данных файлов как скомпилированных и указанных ссылками</value>
  </data>
  <data name="fsiFailedToResolveAssembly" xml:space="preserve">
    <value>Не удалось выполнить разрешение сборки ''{0}''</value>
  </data>
  <data name="fsiIntroTextHeader2commandLine" xml:space="preserve">
    <value>  Параметры командной строки F# Interactive:</value>
  </data>
  <data name="fsiIntroTextHashquitInfo" xml:space="preserve">
    <value>Выход</value>
  </data>
  <data name="fsiRemaining" xml:space="preserve">
    <value>Обрабатывать остальные аргументы как аргументы командной строки с использованием fsi.CommandLineArgs</value>
  </data>
  <data name="fsiEmitDebugInfoInQuotations" xml:space="preserve">
    <value>Вывод отладочной информации в кавычках</value>
  </data>
  <data name="fsiAbortingMainThread" xml:space="preserve">
    <value>- Прерывание главного потока...</value>
  </data>
  <data name="fsiAdvanced" xml:space="preserve">
    <value>- ДОПОЛНИТЕЛЬНО -</value>
  </data>
  <data name="fsiIntroTextHashrInfo" xml:space="preserve">
    <value>Ссылка на (динамическая загрузка) данную библиотеку DLL</value>
  </data>
  <data name="fsiDidAHashI" xml:space="preserve">
    <value>--&gt; Выполнено добавление "{0}" по пути включения в библиотеку</value>
  </data>
  <data name="fsiDidAHashr" xml:space="preserve">
    <value>--&gt; Задана ссылка на "{0}"</value>
  </data>
  <data name="fsiIntroTextHashtimeInfo" xml:space="preserve">
    <value>Включение и отключение таймера</value>
  </data>
  <data name="fsiIntroTextHashIInfo" xml:space="preserve">
    <value>Добавление данного пути поиска для указанных библиотек DLL</value>
  </data>
  <data name="fsiIntroTextHeader1directives" xml:space="preserve">
    <value>  Директивы F# Interactive:</value>
  </data>
  <data name="fsiLoadingFilesPrefixText" xml:space="preserve">
    <value>Загрузка</value>
  </data>
  <data name="stoppedDueToError" xml:space="preserve">
    <value>Остановлено из-за ошибки\n</value>
  </data>
  <data name="fsiInterrupt" xml:space="preserve">
    <value>\n- Interrupt\n</value>
  </data>
  <data name="fsiInvalidAssembly" xml:space="preserve">
    <value>"{0}" не является допустимым именем сборки</value>
  </data>
  <data name="fsiExceptionDuringPrettyPrinting" xml:space="preserve">
    <value>\n\nВозникло исключение при качественной печати.\nОтправьте отчет об этой неполадке для ее устранения.\nТрассировка: {0}\n</value>
  </data>
  <data name="fsiTurnedTimingOff" xml:space="preserve">
    <value>--&gt; Таймер отключен</value>
  </data>
  <data name="fsiDidAHashrWithStaleWarning" xml:space="preserve">
    <value>--&gt; "{0}" с заданной ссылкой (из этого расположения уже задана ссылка на сборку с другой меткой времени, выполните сброс fsi, чтобы загрузить обновленную сборку)</value>
  </data>
  <data name="fsiLanguage" xml:space="preserve">
    <value>- ЯЗЫК -</value>
  </data>
  <data name="fsiMiscellaneous" xml:space="preserve">
    <value>- ПРОЧЕЕ -</value>
  </data>
  <data name="fsiConsoleProblem" xml:space="preserve">
    <value>Возникла проблема при запуске процесса F# Interactive. Это может быть вызвано известной проблемой с поддержкой консоли фонового процесса для приложений с поддержкой Юникода в некоторых системах Windows. Попробуйте выбрать "Сервис-&gt;Параметры-&gt;F# Interactive для Visual Studio" и ввести "--fsi-server-no-unicode".</value>
  </data>
  <data name="fsiIntroTextHashhelpInfo" xml:space="preserve">
    <value>Отображать справку</value>
  </data>
  <data name="fsiTurnedTimingOn" xml:space="preserve">
    <value>--&gt; Таймер включен</value>
  </data>
  <data name="fsiIntroTextHeader3" xml:space="preserve">
    <value>      Параметры см. в "{0}"</value>
  </data>
  <data name="fsiExceptionRaisedStartingServer" xml:space="preserve">
    <value>При запуске удаленного сервера возникло исключение.\n{0}</value>
  </data>
  <data name="fsiInvalidDirective" xml:space="preserve">
    <value>Недопустимая директива "#{0} {1}"</value>
  </data>
  <data name="fsiProductName" xml:space="preserve">
    <value>Microsoft (R) F# Interactive, версия {0}</value>
  </data>
  <data name="fsiBindingSessionTo" xml:space="preserve">
    <value>Привязка сеанса к "{0}"...</value>
  </data>
  <data name="fsiCodeGeneration" xml:space="preserve">
    <value>- ФОРМИРОВАНИЕ КОДА -</value>
  </data>
  <data name="fsiTimeInfoGCGenerationLabelSomeShorthandForTheWordGeneration" xml:space="preserve">
    <value>gen</value>
  </data>
  <data name="fsiDirectoryDoesNotExist" xml:space="preserve">
    <value>Каталог "{0}" не существует</value>
  </data>
  <data name="fsiCouldNotInstallCtrlCHandler" xml:space="preserve">
    <value>Не удалось установить обработчик ctrl-c - обработка Ctrl-C будет недоступна. Ошибка:\n\t{0}</value>
  </data>
  <data name="fsiLineTooLong" xml:space="preserve">
    <value>Предупреждение: слишком длинная строка, некоторые знаки игнорируются\n</value>
  </data>
  <data name="fsiUse" xml:space="preserve">
    <value>Использование данного файла при запуске в качестве начальных входных данных</value>
  </data>
  <data name="fsiGui" xml:space="preserve">
    <value>Выполнение взаимодействий при зацикливании события Windows Forms (включено по умолчанию)</value>
  </data>
  <data name="shadowCopyReferences" xml:space="preserve">
    <value>Предотвращает блокировку ссылок интерактивным процессом F#.</value>
  </data>
  <data name="fsiBanner3" xml:space="preserve">
    <value>Для получения справки введите #help;;</value>
  </data>
  <data name="fsiInputFiles" xml:space="preserve">
    <value>- ВХОДНЫЕ ФАЙЛЫ -</value>
  </data>
  <data name="fsiHelp" xml:space="preserve">
    <value>Вывод данного сообщения об использовании (краткая форма: -?)</value>
  </data>
  <data name="fsiLoad" xml:space="preserve">
    <value>#load: загружать данный файл при запуске</value>
  </data>
  <data name="fsiExec" xml:space="preserve">
    <value>Выход из FSI после загрузки файлов или выполнение скрипта .fsx, указанного в командной строке</value>
  </data>
  <data name="fsiExit" xml:space="preserve">
    <value>\n- Выход...\n</value>
  </data>
  <data name="fsiErrorsAndWarnings" xml:space="preserve">
    <value>- ОШИБКИ И ПРЕДУПРЕЖДЕНИЯ -</value>
  </data>
  <data name="fsiQuiet" xml:space="preserve">
    <value>Запретить fsi запись в stdout</value>
  </data>
  <data name="fsiUsage" xml:space="preserve">
    <value>Использование: {0} &lt;параметры&gt; [script.fsx [&lt;аргументы&gt;]]</value>
  </data>
</root>