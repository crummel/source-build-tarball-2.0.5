<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fsiUnexpectedThreadAbortException" xml:space="preserve">
    <value>- イベント処理中に予期しない ThreadAbortException (Ctrl-C) が発生しました: 再開を試行しています...</value>
  </data>
  <data name="fsiProductNameCommunity" xml:space="preserve">
    <value>F# {0} の F# Interactive</value>
  </data>
  <data name="fsiDidAHashrWithLockWarning" xml:space="preserve">
    <value>--&gt; '{0}' を参照しました (ファイルが F# Interactive のプロセスによってロックされている可能性があります)</value>
  </data>
  <data name="fsiTimeInfoMainString" xml:space="preserve">
    <value>リアル: {0}、CPU: {1}、GC {2}</value>
  </data>
  <data name="fsiReadline" xml:space="preserve">
    <value>コンソールでの TAB 補完のサポート (既定でオン)</value>
  </data>
  <data name="fsiIntroTextHashloadInfo" xml:space="preserve">
    <value>コンパイルおよび参照されているように、指定されたファイルを読み込みます</value>
  </data>
  <data name="fsiFailedToResolveAssembly" xml:space="preserve">
    <value>アセンブリ '{0}' を解決できませんでした</value>
  </data>
  <data name="fsiIntroTextHeader2commandLine" xml:space="preserve">
    <value>  F# Interactive コマンド ライン オプション:</value>
  </data>
  <data name="fsiIntroTextHashquitInfo" xml:space="preserve">
    <value>終了</value>
  </data>
  <data name="fsiRemaining" xml:space="preserve">
    <value>残りの引数は、fsi.CommandLineArgs を使用してアクセスするコマンド ライン引数として扱います</value>
  </data>
  <data name="fsiEmitDebugInfoInQuotations" xml:space="preserve">
    <value>デバッグ情報を引用符で囲んで生成します</value>
  </data>
  <data name="fsiAbortingMainThread" xml:space="preserve">
    <value>- メイン スレッドを中止しています...</value>
  </data>
  <data name="fsiAdvanced" xml:space="preserve">
    <value>- 詳細 -</value>
  </data>
  <data name="fsiIntroTextHashrInfo" xml:space="preserve">
    <value>指定された DLL を参照します (動的読み込み)</value>
  </data>
  <data name="fsiDidAHashI" xml:space="preserve">
    <value>--&gt; ライブラリのインクルード パスに '{0}' を追加しました</value>
  </data>
  <data name="fsiDidAHashr" xml:space="preserve">
    <value>--&gt; '{0}' を参照しました</value>
  </data>
  <data name="fsiIntroTextHashtimeInfo" xml:space="preserve">
    <value>タイミングのオンとオフを切り替えます</value>
  </data>
  <data name="fsiIntroTextHashIInfo" xml:space="preserve">
    <value>参照されている DLL に対し、指定された検索パスを追加します</value>
  </data>
  <data name="fsiIntroTextHeader1directives" xml:space="preserve">
    <value>  F# Interactive ディレクティブ:</value>
  </data>
  <data name="fsiLoadingFilesPrefixText" xml:space="preserve">
    <value>読み込み中</value>
  </data>
  <data name="stoppedDueToError" xml:space="preserve">
    <value>エラーのため停止しました\n</value>
  </data>
  <data name="fsiInterrupt" xml:space="preserve">
    <value>\n- 割り込み\n</value>
  </data>
  <data name="fsiInvalidAssembly" xml:space="preserve">
    <value>'{0}' は有効なアセンブリ名ではありません</value>
  </data>
  <data name="fsiExceptionDuringPrettyPrinting" xml:space="preserve">
    <value>\n\n再フォーマット中に例外が発生しました。\nこの問題を解決できるように報告してください。\nトレース: {0}\n</value>
  </data>
  <data name="fsiTurnedTimingOff" xml:space="preserve">
    <value>--&gt; 現在タイミングはオフです</value>
  </data>
  <data name="fsiDidAHashrWithStaleWarning" xml:space="preserve">
    <value>--&gt; 参照された '{0}' (タイムスタンプが異なるアセンブリが既にこの場所から参照されています。fsi をリセットして更新されたアセンブリを読み込んでください)</value>
  </data>
  <data name="fsiLanguage" xml:space="preserve">
    <value>- 言語 -</value>
  </data>
  <data name="fsiMiscellaneous" xml:space="preserve">
    <value>- その他 -</value>
  </data>
  <data name="fsiConsoleProblem" xml:space="preserve">
    <value>F# Interactive のプロセスの開始中に問題が発生しました。この原因は、一部の Windows システム上での Unicode 対応アプリケーションのバックグラウンド プロセス コンソールのサポートに関する既知の問題にある可能性があります。[ツール] の [オプション] から [F# Interactive for Visual Studio] を選択し、「--fsi-server-no-unicode」と入力してください。</value>
  </data>
  <data name="fsiIntroTextHashhelpInfo" xml:space="preserve">
    <value>ヘルプの表示</value>
  </data>
  <data name="fsiTurnedTimingOn" xml:space="preserve">
    <value>--&gt; 現在タイミングはオンです</value>
  </data>
  <data name="fsiIntroTextHeader3" xml:space="preserve">
    <value>      オプションについては '{0}' を参照してください</value>
  </data>
  <data name="fsiExceptionRaisedStartingServer" xml:space="preserve">
    <value>サーバーのリモート処理の開始中に例外が発生しました。\n{0}</value>
  </data>
  <data name="fsiInvalidDirective" xml:space="preserve">
    <value>無効なディレクティブ '#{0} {1}'</value>
  </data>
  <data name="fsiProductName" xml:space="preserve">
    <value>Microsoft (R) F# Interactive Version {0}</value>
  </data>
  <data name="fsiBindingSessionTo" xml:space="preserve">
    <value>セッションを '{0}' にバインドしています...</value>
  </data>
  <data name="fsiCodeGeneration" xml:space="preserve">
    <value>- コード生成 -</value>
  </data>
  <data name="fsiTimeInfoGCGenerationLabelSomeShorthandForTheWordGeneration" xml:space="preserve">
    <value>gen</value>
  </data>
  <data name="fsiDirectoryDoesNotExist" xml:space="preserve">
    <value>ディレクトリ "{0}" は存在しません</value>
  </data>
  <data name="fsiCouldNotInstallCtrlCHandler" xml:space="preserve">
    <value>ctrl-c ハンドラーをインストールできませんでした - Ctrl-C 処理を使用できるようになりません。エラー:\n\t{0}</value>
  </data>
  <data name="fsiLineTooLong" xml:space="preserve">
    <value>警告: 行が長すぎます。一部の文字は無視されます\n</value>
  </data>
  <data name="fsiUse" xml:space="preserve">
    <value>指定されたファイルをスタートアップ時の初期入力として使用します</value>
  </data>
  <data name="fsiGui" xml:space="preserve">
    <value>Windows フォーム イベント ループでの対話の実行 (既定でオン)</value>
  </data>
  <data name="shadowCopyReferences" xml:space="preserve">
    <value>参照が F# 対話型プロセスによってロックされないようにします。</value>
  </data>
  <data name="fsiBanner3" xml:space="preserve">
    <value>ヘルプを表示するには次を入力してください: #help;;</value>
  </data>
  <data name="fsiInputFiles" xml:space="preserve">
    <value>- 入力ファイル -</value>
  </data>
  <data name="fsiHelp" xml:space="preserve">
    <value>この使用方法に関するメッセージを表示します (短い形式: -?)</value>
  </data>
  <data name="fsiLoad" xml:space="preserve">
    <value>#load: 指定されたファイルをスタートアップ時に読み込みます</value>
  </data>
  <data name="fsiExec" xml:space="preserve">
    <value>コマンド ライン上で指定されたファイルの読み込みまたは .fsx スクリプトの実行後、fsi を終了します</value>
  </data>
  <data name="fsiExit" xml:space="preserve">
    <value>\n- 終了...\n</value>
  </data>
  <data name="fsiErrorsAndWarnings" xml:space="preserve">
    <value>- エラーと警告 -</value>
  </data>
  <data name="fsiQuiet" xml:space="preserve">
    <value>fsi の stdout への書き込みの抑止</value>
  </data>
  <data name="fsiUsage" xml:space="preserve">
    <value>使い方: {0} &lt;オプション&gt; [script.fsx [&lt;引数&gt;]]</value>
  </data>
</root>