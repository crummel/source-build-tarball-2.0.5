From ebbb1ea196155f74a60017bfd6a71b0692088b9b Mon Sep 17 00:00:00 2001
From: Matt Ellis <matell@microsoft.com>
Date: Fri, 9 Jun 2017 17:01:01 -0700
Subject: [PATCH] Remove Azure dependency from build

---
 .../Microsoft.DotNet.Cli.Build.Framework.csproj    |   2 +-
 .../Publishing/AzurePublisher.cs                   | 166 ++-------------------
 .../shared-build-targets-utils.csproj              |   4 +-
 3 files changed, 19 insertions(+), 153 deletions(-)

diff --git a/build_projects/Microsoft.DotNet.Cli.Build.Framework/Microsoft.DotNet.Cli.Build.Framework.csproj b/build_projects/Microsoft.DotNet.Cli.Build.Framework/Microsoft.DotNet.Cli.Build.Framework.csproj
index dd2f94e..cd69b18 100644
--- a/build_projects/Microsoft.DotNet.Cli.Build.Framework/Microsoft.DotNet.Cli.Build.Framework.csproj
+++ b/build_projects/Microsoft.DotNet.Cli.Build.Framework/Microsoft.DotNet.Cli.Build.Framework.csproj
@@ -13,7 +13,7 @@
     <PackageReference Include="NETStandard.Library" Version="1.6.0" />
     <PackageReference Include="System.Diagnostics.Process" Version="4.1.0" />
     <PackageReference Include="System.Reflection.TypeExtensions" Version="4.1.0" />
-    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Version="1.0.3" />
+    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Version="$(PlatformAbstractionsVersion)" />
   </ItemGroup>
 
 </Project>
diff --git a/build_projects/shared-build-targets-utils/Publishing/AzurePublisher.cs b/build_projects/shared-build-targets-utils/Publishing/AzurePublisher.cs
index 1f10476..6b0400f 100644
--- a/build_projects/shared-build-targets-utils/Publishing/AzurePublisher.cs
+++ b/build_projects/shared-build-targets-utils/Publishing/AzurePublisher.cs
@@ -9,9 +9,6 @@
 using System.Net.Http;
 using System.Threading;
 using System.Threading.Tasks;
-using Microsoft.WindowsAzure.Storage;
-using Microsoft.WindowsAzure.Storage.Auth;
-using Microsoft.WindowsAzure.Storage.Blob;
 
 namespace Microsoft.DotNet.Cli.Build
 {
@@ -25,113 +22,44 @@ public enum Product
             Sdk,
         }
 
-        private const string s_dotnetBlobContainerName = "dotnet";
-
-        private string _connectionString { get; set; }
-        private string _containerName { get; set; }
-        private CloudBlobContainer _blobContainer { get; set; }
-
-        public AzurePublisher(string containerName = s_dotnetBlobContainerName)
+        public AzurePublisher(string containerName)
         {
-            _connectionString = EnvVars.EnsureVariable("CONNECTION_STRING").Trim('"');
-            _containerName = containerName;
-            _blobContainer = GetDotnetBlobContainer(_connectionString, containerName);
+            throw new NotImplementedException();
         }
 
-        public AzurePublisher(string accountName, string accountKey, string containerName = s_dotnetBlobContainerName)
+        public AzurePublisher(string accountName, string accountKey, string containerName)
         {
-            _containerName = containerName;
-            _blobContainer = GetDotnetBlobContainer(accountName, accountKey, containerName);
-        }
-
-        private CloudBlobContainer GetDotnetBlobContainer(string connectionString, string containerName)
-        {
-            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);
-
-            return GetDotnetBlobContainer(storageAccount, containerName);
-        }
-
-        private CloudBlobContainer GetDotnetBlobContainer(string accountName, string accountKey, string containerName)
-        {
-            var storageCredentials = new StorageCredentials(accountName, accountKey);
-            var storageAccount = new CloudStorageAccount(storageCredentials, true);
-            return GetDotnetBlobContainer(storageAccount, containerName);
-        }
-
-        private CloudBlobContainer GetDotnetBlobContainer(CloudStorageAccount storageAccount, string containerName)
-        {
-            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();
-
-            return blobClient.GetContainerReference(containerName);
+            throw new NotImplementedException();
         }
 
         public string UploadFile(string file, Product product, string version)
         {
-            string url = CalculateRelativePathForFile(file, product, version);
-            CloudBlockBlob blob = _blobContainer.GetBlockBlobReference(url);
-            blob.UploadFromFileAsync(file).Wait();
-            SetBlobPropertiesBasedOnFileType(blob);
-            return url;
+            throw new NotImplementedException();
         }
 
         public void PublishStringToBlob(string blob, string content)
         {
-            CloudBlockBlob blockBlob = _blobContainer.GetBlockBlobReference(blob);
-            blockBlob.UploadTextAsync(content).Wait();
-
-            SetBlobPropertiesBasedOnFileType(blockBlob);
+            throw new NotImplementedException();
         }
 
         public void CopyBlob(string sourceBlob, string targetBlob)
         {
-            CloudBlockBlob source = _blobContainer.GetBlockBlobReference(sourceBlob);
-            CloudBlockBlob target = _blobContainer.GetBlockBlobReference(targetBlob);
-
-            // Create the empty blob
-            using (MemoryStream ms = new MemoryStream())
-            {
-                target.UploadFromStreamAsync(ms).Wait();
-            }
-
-            // Copy actual blob data
-            target.StartCopyAsync(source).Wait();
+            throw new NotImplementedException();
         }
 
         public void SetBlobPropertiesBasedOnFileType(string path)
         {
-            CloudBlockBlob blob = _blobContainer.GetBlockBlobReference(path);
-            SetBlobPropertiesBasedOnFileType(blob);
-        }
-
-        private void SetBlobPropertiesBasedOnFileType(CloudBlockBlob blockBlob)
-        {
-            if (Path.GetExtension(blockBlob.Uri.AbsolutePath.ToLower()) == ".svg")
-            {
-                blockBlob.Properties.ContentType = "image/svg+xml";
-                blockBlob.Properties.CacheControl = "no-cache";
-                blockBlob.SetPropertiesAsync().Wait();
-            }
-            else if (Path.GetExtension(blockBlob.Uri.AbsolutePath.ToLower()) == ".version")
-            {
-                blockBlob.Properties.ContentType = "text/plain";
-                blockBlob.Properties.CacheControl = "no-cache";
-                blockBlob.SetPropertiesAsync().Wait();
-            }
+            throw new NotImplementedException();
         }
 
         public IEnumerable<string> ListBlobs(Product product, string version)
         {
-            string virtualDirectory = $"{product}/{version}";
-            return ListBlobs(virtualDirectory);
+            throw new NotImplementedException();
         }
 
         public IEnumerable<string> ListBlobs(string virtualDirectory)
         {
-            CloudBlobDirectory blobDir = _blobContainer.GetDirectoryReference(virtualDirectory);
-            BlobContinuationToken continuationToken = new BlobContinuationToken();
-
-            var blobFiles = blobDir.ListBlobsSegmentedAsync(continuationToken).Result;
-            return blobFiles.Results.Select(bf => bf.Uri.PathAndQuery.Replace($"/{_containerName}/", string.Empty));
+            throw new NotImplementedException();
         }
 
         public string AcquireLeaseOnBlob(
@@ -139,94 +67,32 @@ public IEnumerable<string> ListBlobs(string virtualDirectory)
             TimeSpan? maxWaitDefault = null,
             TimeSpan? delayDefault = null)
         {
-            TimeSpan maxWait = maxWaitDefault ?? TimeSpan.FromSeconds(120);
-            TimeSpan delay = delayDefault ?? TimeSpan.FromMilliseconds(500);
-
-            Stopwatch stopWatch = new Stopwatch();
-            stopWatch.Start();
-
-            // This will throw an exception with HTTP code 409 when we cannot acquire the lease
-            // But we should block until we can get this lease, with a timeout (maxWaitSeconds)
-            while (stopWatch.ElapsedMilliseconds < maxWait.TotalMilliseconds)
-            {
-                try
-                {
-                    CloudBlockBlob cloudBlob = _blobContainer.GetBlockBlobReference(blob);
-                    Task<string> task = cloudBlob.AcquireLeaseAsync(TimeSpan.FromMinutes(1), null);
-                    task.Wait();
-                    return task.Result;
-                }
-                catch (Exception e)
-                {
-                    Console.WriteLine($"Retrying lease acquisition on {blob}, {e.Message}");
-                    Thread.Sleep(delay);
-                }
-            }
-
-            throw new Exception($"Unable to acquire lease on {blob}");
+            throw new NotImplementedException();
         }
 
         public void ReleaseLeaseOnBlob(string blob, string leaseId)
         {
-            CloudBlockBlob cloudBlob = _blobContainer.GetBlockBlobReference(blob);
-            AccessCondition ac = new AccessCondition() { LeaseId = leaseId };
-            cloudBlob.ReleaseLeaseAsync(ac).Wait();
+            throw new NotImplementedException();
         }
 
         public bool IsLatestSpecifiedVersion(string version)
         {
-            Task<bool> task = _blobContainer.GetBlockBlobReference(version).ExistsAsync();
-            task.Wait();
-            return task.Result;
+            throw new NotImplementedException();
         }
 
         public void DropLatestSpecifiedVersion(string version)
         {
-            CloudBlockBlob blob = _blobContainer.GetBlockBlobReference(version);
-            using (MemoryStream ms = new MemoryStream())
-            {
-                blob.UploadFromStreamAsync(ms).Wait();
-            }
+            throw new NotImplementedException();
         }
 
         public void CreateBlobIfNotExists(string path)
         {
-            Task<bool> task = _blobContainer.GetBlockBlobReference(path).ExistsAsync();
-            task.Wait();
-            if (!task.Result)
-            {
-                CloudBlockBlob blob = _blobContainer.GetBlockBlobReference(path);
-                using (MemoryStream ms = new MemoryStream())
-                {
-                    blob.UploadFromStreamAsync(ms).Wait();
-                }
-            }
+            throw new NotImplementedException();
         }
 
         public bool TryDeleteBlob(string path)
         {
-            try
-            {
-                DeleteBlob(path);
-
-                return true;
-            }
-            catch (Exception e)
-            {
-                Console.WriteLine($"Deleting blob {path} failed with \r\n{e.Message}");
-
-                return false;
-            }
-        }
-
-        private void DeleteBlob(string path)
-        {
-            _blobContainer.GetBlockBlobReference(path).DeleteAsync().Wait();
-        }
-
-        private static string CalculateRelativePathForFile(string file, Product product, string version)
-        {
-            return $"{product}/{version}/{Path.GetFileName(file)}";
+            throw new NotImplementedException();
         }
     }
 }
diff --git a/build_projects/shared-build-targets-utils/shared-build-targets-utils.csproj b/build_projects/shared-build-targets-utils/shared-build-targets-utils.csproj
index 4e75c14..a4adeae 100644
--- a/build_projects/shared-build-targets-utils/shared-build-targets-utils.csproj
+++ b/build_projects/shared-build-targets-utils/shared-build-targets-utils.csproj
@@ -13,13 +13,13 @@
   </ItemGroup>
 
   <ItemGroup>
+    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
     <PackageReference Include="NETStandard.Library" Version="1.6.0" />
     <PackageReference Include="System.Reflection.Metadata" Version="1.4.2" />
     <PackageReference Include="System.Runtime.Serialization.Primitives" Version="4.1.1" />
     <PackageReference Include="System.Threading.Thread" Version="4.0.0" />
     <PackageReference Include="System.Xml.XmlSerializer" Version="4.0.11" />
-    <PackageReference Include="WindowsAzure.Storage" Version="7.2.1" />
-    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Version="1.0.3" />
+    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Version="$(PlatformAbstractionsVersion)" />
   </ItemGroup>
 
 </Project>
-- 
1.8.3.1

